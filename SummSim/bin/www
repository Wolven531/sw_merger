#!/usr/bin/env node
'use strict';

const app = require('../app');
const debug = require('debug')('app:server');
const http = require('http');
const ngrok = require('ngrok');

const port = process.env.PORT || 5555;
const optsNgrok = {
    proto: 'http', // http|tcp|tls
    addr: port, // port or network address to be exposed
    web_addr: '127.0.0.1:4040', // public address
    // auth: 'user:pwd', // http basic authentication for tunnel
    // subdomain: 'alex', // reserved tunnel name https://alex.ngrok.io
    // authtoken: '12345', // your authtoken from ngrok.com
    region: 'us', // one of ngrok regions (us, eu, au, ap), defaults to us,
    // configPath: '~/git/project/ngrok.yml' // custom path for ngrok config file
};

app.set('port', port);
app.set('ngrokConfig', optsNgrok);

// NOTE: event listener for HTTP server 'error' event.
const onError = (error) => {
    if (error.syscall !== 'listen') {
        throw error;
    }

    const bind = typeof port === 'string' ? 'Pipe ' + port : 'Port ' + port;

    // NOTE: handle specific listen errors with friendly messages
    switch (error.code) {
    case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
    case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
    default:
        throw error;
    }
};

// NOTE: event listener for HTTP server 'listening' event.
const onListening = () => {
    // const addr = server.address();
    // const bind = (typeof addr === 'string') ? addr : addr.port;
    console.info('[www] [listen] Server is opening, connecting ngrok...');
    ngrok.connect(optsNgrok, (err, url) => {
        if (err || !url) {
            console.error(err || 'noUrl');
        }

        app.set('ngrokUrl', url);
        console.info(`[www] [listen] Server available at ${ url }`);
    });
};

const onClose = () => {
    console.info('[www] [close] Server is closing, disconnecting ngrok...');
    ngrok.disconnect();
    ngrok.kill();
};

const server = http.createServer(app);
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
server.on('close', onClose);

// NOTE: awill: found this at https://www.npmjs.com/package/nodemon
// This intercepts the shutdown process for nodemon, so we can
// properly kill connections and processes off
process.once('SIGUSR2', () => {
    console.info('[www] Got SIGUSR2');
    onClose();
    process.kill(process.pid, 'SIGUSR2');
});
